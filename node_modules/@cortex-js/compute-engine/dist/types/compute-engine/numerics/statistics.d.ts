/* 0.28.0 */import { BigNumFactory } from '../numeric-value/big-numeric-value';
import { BigNum } from './bignum';
export declare function mean(values: Iterable<number>): number;
export declare function bigMean(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function median(values: Iterable<number>): number;
export declare function bigMedian(values: Iterable<BigNum>): BigNum;
export declare function variance(values: Iterable<number>): number;
export declare function bigVariance(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function populationVariance(values: Iterable<number>): number;
export declare function bigPopulationVariance(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function standardDeviation(values: Iterable<number>): number;
export declare function bigStandardDeviation(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function populationStandardDeviation(values: Iterable<number>): number;
export declare function bigPopulationStandardDeviation(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function kurtosis(values: Iterable<number>): number;
export declare function bigKurtosis(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function skewness(values: Iterable<number>): number;
export declare function bigSkewness(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function mode(values: Iterable<number>): number;
export declare function bigMode(bignum: BigNumFactory, values: Iterable<BigNum>): BigNum;
export declare function quartiles(values: Iterable<number>): [number, number, number];
export declare function bigQuartiles(values: Iterable<BigNum>): [BigNum, BigNum, BigNum];
export declare function interquartileRange(values: Iterable<number>): number;
export declare function bigInterquartileRange(values: Iterable<BigNum>): BigNum;
